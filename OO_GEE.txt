// Function to mask clouds using the Sentinel-2 QA band.
function maskS2clouds(image) {
  var qa = image.select('QA60')

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
             qa.bitwiseAnd(cirrusBitMask).eq(0))

  // Return the masked and scaled data, without the QA bands.
  return image.updateMask(mask).divide(10000)
      .select("B.*")
      .copyProperties(image, ["system:time_start"])
}
function addIndices(image){
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename(['ndvi']);
  var ndvire1 = image.normalizedDifference(['B8A', 'B5']).rename(['ndvire1']);
  var ndvire2 = image.normalizedDifference(['B8A', 'B6']).rename(['ndvire2']);
  var ndvire3 = image.normalizedDifference(['B8A', 'B7']).rename(['ndvire3']);
  return image.addBands(ndvi.rename("NDVI")).addBands(ndvire1.rename("NDVIRE1")).addBands(ndvire2.rename("NDVIRE2")).addBands(ndvire3.rename("NDVIRE3"))

}
// Call and filter sentinel-1 images
var collection_S1=ee.ImageCollection('COPERNICUS/S1_GRD')
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'));
var collection_S1_IW=collection_S1
.filterBounds(region)
.filterMetadata('instrumentMode','equals','IW')
.filterDate('2021-07-01', '2021-08-31');
var Sentinel_1=collection_S1_IW.median()
var collection2 = ee.ImageCollection('COPERNICUS/S2')
    .filterDate('2021-07-01', '2021-08-31')
    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
    .map(maskS2clouds)
var composite2= collection2
                  .map(addIndices)
                  .median();       
print(composite2)
var data=ee.Image.cat([Sentinel_1,composite2.clip(region)]).float().clip(region)
Map.addLayer(composite2.clip(region), {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3}, 'RGB2')
Map.centerObject(region,14)
// Segmentation -----------------------------------------------------------------------------

var seeds = ee.Algorithms.Image.Segmentation.seedGrid(13);

var snic = ee.Algorithms.Image.Segmentation.SNIC({
  image: data, 
  size:1,
  compactness: 0.1,
  connectivity: 8,
  neighborhoodSize: 256,
  seeds: seeds
})
print(snic)
var clusters_snic = snic.select("clusters")
print(clusters_snic)
var vectors = clusters_snic.reduceToVectors({
  geometryType: 'polygon',
  reducer: ee.Reducer.countEvery(),
  scale: 10,
  maxPixels: 1e13,
  geometry: region,
  tileScale: 16
});
var empty = ee.Image().byte();
var outline = empty.paint({
  featureCollection: vectors,
  color: 1,
  width: 1
});
Map.addLayer(outline.clip(region), {palette: 'FF0000'}, 'segments');
var table = XIAOMAI.merge(LIMAI).merge(YOUCAI).merge(QITA)

var sampleData = table.filterBounds(region).randomColumn('random')
var sample_training = sampleData.filter(ee.Filter.lt("random", 0.7));
var sample_validate  = sampleData.filter(ee.Filter.gte("random", 0.7));
var objectPropertiesImage = ee.Image.cat([
  snic.select(['B2_mean','B3_mean','B4_mean','B5_mean','B6_mean','B7_mean','B8_mean','B8A_mean','B9_mean','B10_mean','B11_mean','B12_mean','B1_mean','VV_mean','VH_mean','NDVI_mean','NDVIRE1_mean','NDVIRE2_mean','NDVIRE3_mean']),
]).float();
print(objectPropertiesImage);
//var img2 = ee.Image(objectPropertiesImage).divide(255);
//Select training samples
var training = objectPropertiesImage.sampleRegions({
  collection: sample_training,
  properties: ['landcover'],
  scale: 10,
  tileScale:8
});
print("training",training);
 var validate = objectPropertiesImage.sampleRegions({
  collection: sample_validate,
  properties: ['landcover'],
  scale: 10,
  tileScale:8
});
/*var training = objectPropertiesImage.addBands(table.select('value'))
    .updateMask(seeds)
    .sample(table, 5);
print("training2",training2);*/
//classification
var classifier = ee.Classifier.smileCart().train(training, 'landcover');
print(classifier);
var result=objectPropertiesImage.classify(classifier,'Classified objects');
//Export.image.toCloudStorage(result,"202012172236");
//var resultshp = result.updateMask(seeds).sample(table, 5);
//Export.table.toCloudStorage(resultshp,"202012172120");
print(result);
Map.addLayer(result.clip(region), {min: 0, max: 3, 
palette: ['#FF0000','#00FF00','#0000FF','#F5DEB3']},  'RFYASUO');
// Confusion matrix method
var test=validate.classify(classifier,'classification');
var testAccuracy = test.errorMatrix('landcover', 'classification');
print('Confusion Matrix', testAccuracy);
// Overall classification accuracy
var accuracy = testAccuracy.accuracy();
// User classification accuracy
var userAccuracy = testAccuracy.consumersAccuracy();
// Producers classification accuracy
var producersAccuracy = testAccuracy.producersAccuracy();
// Kappa coefficient
var kappa = testAccuracy.kappa();
print('Validation error matrix:', testAccuracy);
print('User acc:', userAccuracy);
print('Prod acc:', producersAccuracy);
print('Validation overall accuracy:', accuracy);
print('Kappa:', kappa);
Export.image.toDrive({
        image:  result.clip(region),
        description: 'mxdx',
        folder: 'CLASS',
        scale: 10,//分辨率
        region: region,
        crs:"EPSG:4326",
        maxPixels:1e13
      });